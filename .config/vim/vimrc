"          _
" __  ____| | __ _   ___ _ __   ___  ___
" \ \/ / _` |/ _` | / __| '_ \ / _ \/ __|
"  >  < (_| | (_| | \__ \ |_) |  __/ (__
" /_/\_\__,_|\__, | |___/ .__/ \___|\___|
"            |___/      |_|
"
" force vim to follow XDG base directory specification
if empty($XDG_CACHE_HOME)  | let $XDG_CACHE_HOME  = $HOME."/.cache"       | endif
if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME."/.config"      | endif
if empty($XDG_DATA_HOME)   | let $XDG_DATA_HOME   = $HOME."/.local/share" | endif
"
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after
"
set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after
"
let g:netrw_home = $XDG_DATA_HOME."/vim"
let g:spellfile_URL = 'https://ftp.nluug.nl/vim/runtime/spell'
call mkdir($XDG_DATA_HOME."/vim/spell", 'p', 0700)
set viewdir=$XDG_DATA_HOME/vim/view | call mkdir(&viewdir, 'p', 0700)
"
set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, 'p', 0700)
set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir(&directory, 'p', 0700)
set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir(&undodir,   'p', 0700)
set viminfofile=/tmp/viminfo

"           _                        _
"  ___  ___| |_    ___ _ __ ___   __| |___
" / __|/ _ \ __|  / __| '_ ` _ \ / _` / __|
" \__ \  __/ |_  | (__| | | | | | (_| \__ \
" |___/\___|\__|  \___|_| |_| |_|\__,_|___/
"
set nocompatible
set background=dark
set clipboard=unnamedplus
" place ‘case’ labels under ‘switch’ with no indentation
set cinoptions+=:0
set encoding=utf-8
set expandtab
" highlight matches in real time
set incsearch
set nohlsearch
set relativenumber
set shiftwidth=2
" display search match index [01/>99] (works starting with v8.1.1270+)
" https://github.com/vim/vim/commit/9dfa3139198b38b28673e251a3756430065914e9
set shortmess-=S
" show pressed keys in normal mode
set showcmd
set softtabstop=2
" the opposite of the defaults
set splitbelow splitright
" break line on 72 chars
set textwidth=72
" disable the delay when entering normal mode
set ttimeoutlen=0
" cmd autocompletion
set wildmode=longest,list,full

"        _                                   _
" __   _(_)   ___ ___  _ __ ___  _ __   __ _| |_
" \ \ / / |  / __/ _ \| '_ ` _ \| '_ \ / _` | __|
"  \ V /| | | (_| (_) | | | | | | |_) | (_| | |_
"   \_/ |_|  \___\___/|_| |_| |_| .__/ \__,_|\__|
"                               |_|
" indent new lines
set autoindent
" do not show line, column and current position down below
set noruler
" don't wrap after the last search entry
set nowrapscan
" show line number to the left
set number
" show info in insert/replace/visual modes below
set showmode
" set tab width
set tabstop=2

"                                  _
"   __ _  ___ _ __   ___ _ __ __ _| |
"  / _` |/ _ \ '_ \ / _ \ '__/ _` | |
" | (_| |  __/ | | |  __/ | | (_| | |
"  \__, |\___|_| |_|\___|_|  \__,_|_|
"  |___/
"
syntax on

"        _             _
"  _ __ | |_   _  __ _(_)_ __  ___
" | '_ \| | | | |/ _` | | '_ \/ __|
" | |_) | | |_| | (_| | | | | \__ \
" | .__/|_|\__,_|\__, |_|_| |_|___/
" |_|            |___/
"
" install vim-plug if not yet installed:
if empty(glob('~/.config/vim/autoload/plug.vim'))
  silent !curl -fLo ~/.config/vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif
" list of plugins:
call plug#begin('~/.config/vim/plugged')
  " (un)comment stuff out using 'gc<motion>'
  Plug 'tpope/vim-commentary'
    " set custom comment based on file type
    au FileType sed setlocal commentstring=#\ %s
  " use git from within vim
  Plug 'tpope/vim-fugitive'
  " LaTeX PDF preview
  Plug 'lervag/vimtex'
    let g:vimtex_view_method = 'zathura'
  " basic Go configuration
  Plug 'fatih/vim-go'
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_fields = 1                " struct & interface names
    let g:go_highlight_function_calls = 1        " variable names in parameters
    let g:go_highlight_functions = 1             " function & method declarations
    let g:go_highlight_operators = 1             " :=, ==, *=, etc.
    let g:go_highlight_types = 1
    let g:go_highlight_variable_assignments = 1  " `x` in `x =`
    let g:go_highlight_variable_declarations = 1 " `foo` in `foo :=`
call plug#end()

"                                   _
"   __ _ _   _    ___ _ __ ___   __| |___
"  / _` | | | |  / __| '_ ` _ \ / _` / __|
" | (_| | |_| | | (__| | | | | | (_| \__ \
"  \__,_|\__,_|  \___|_| |_| |_|\__,_|___/
"
" trim all trailing whitespaces and newlines
silent au BufWritePre * %s/\s\+$//e
silent au BufWritePre * %s/\n\+\%$//e
" jump to previous cursor position when opening files
au BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif
" use 4 spaces for awk and Go sources
au Filetype awk,go setlocal tabstop=4 shiftwidth=4 softtabstop=4
" C/C++ proper tabs
au Filetype h,c,cpp setlocal noexpandtab tabstop=8 shiftwidth=8 softtabstop=8

"  _     _                      _
" | |__ (_)   ___ _ __ ___   __| |___
" | '_ \| |  / __| '_ ` _ \ / _` / __|
" | | | | | | (__| | | | | | (_| \__ \
" |_| |_|_|  \___|_| |_| |_|\__,_|___/
"
" recolor status line and vertical split
hi VertSplit ctermfg=cyan
hi StatusLine ctermfg=cyan
hi StatusLineNC ctermfg=cyan

"  _      _                        _
" | | ___| |_    ___ _ __ ___   __| |___
" | |/ _ \ __|  / __| '_ ` _ \ / _` / __|
" | |  __/ |_  | (__| | | | | | (_| \__ \
" |_|\___|\__|  \___|_| |_| |_|\__,_|___/
"
let mapleader = ','
" change cursor shape in different modes (supported in suckless’ st)
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

"                                             _
"  _ __ ___   __ _ _ __     ___ _ __ ___   __| |___
" | '_ ` _ \ / _` | '_ \   / __| '_ ` _ \ / _` / __|
" | | | | | | (_| | |_) | | (__| | | | | | (_| \__ \
" |_| |_| |_|\__,_| .__/   \___|_| |_| |_|\__,_|___/
"                 |_|
"
" enter ex mode without holding down shift button
map ; :
" do not automatically indent pasted text
set pastetoggle=<F2>
" diff current file with buffer
map <leader>d :w !clear && diff -u % -<CR>
" enable spell checker
map <leader>E :setlocal spell! spelllang=en_us<CR>
map <leader>G :setlocal spell! spelllang=de<CR>
" check shell syntax
map <leader>s :!clear && shellcheck %<CR>
" disable number row
map <leader>n :set nonumber norelativenumber<CR>
" enable number row
map <leader>N :set number relativenumber<CR>
" switch to another window without pressing 'w'
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
